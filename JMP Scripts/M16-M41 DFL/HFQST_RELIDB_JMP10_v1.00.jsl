//This JMP script processes HFQST XLSX output files from Excel macro v108. All XLSX files must be place in same folder.
//It only works on JMP10.  
//v1.00		Initial release. Output files must follow filename "HighField_TC_Plots_wwww$Cxxyy_MMDDYY_R???.xlsx"


//_____________________________________________________________________________________________________________________________________________________________________
//Function: Load XLSX processed files to JMP.
Clear Globals ();
Clear Log();


//Get current Excel preference and turn off sheet selection
xlsPref = Char( Arg( Parse( (Char( Get Preferences( Excel Selection ) )) ), 1 ) );
Set Preferences( Excel selection( 0 ) ); 


////////////////////////////////// Combine XLS, "summary" Sheet ////////////////////////////////////////

//Select foldet that contains HFQST XLSX output files
p = pick Directory("Select a Folder");
f = Files In Directory(p);

for(j=1,j<=N Items(f),j++, 
	If (Substr(f[j],Length(f[j])-3,4)!= "XLSX" & Substr(f[j],Length(f[j])-3,4)!= "xlsx",  
		RemoveFrom(f,j,1);
		j=j-1;
	);
);

A = {}; /* creates a empty list for storing the names of each data table */
B = {};
k = {};
  
/*Opens each one of the XLS files and deletes all unwanted rows */
for(j=1,j<=N Items(f),j++, 
	xlsResult = Open(Concat(p,f[j]), Worksheets("summary"));
	colname = {};
	colname = xlsResult<<get Column Names(String);
	if(Contains(colname,"PartID")>0 & Contains(colname,"TC")>0, 
		InsertInto(A,xlsResult);
		xlsResult<<NewColumn("DOE",Character,Formula(Substr(f[j],Length(f[j])-9,1) || Substr(f[j],Length(f[j])-7,3)),EvalFormula);
		xlsResult<<NewColumn("NBO_Tag",Character,Formula(Substr(f[j],Length(f[j])-18,8)),EvalFormula);
		xlsResult<<NewColumn("Lot ID",Character,Formula(Substr(f[j],Length(f[j])-29,10)),EvalFormula);,
	//Else
		InsertInto(B,xlsResult);
		InsertInto(k,f[j]);
	);
);

//Revert Excel preference to original
//Set Preferences(Excel selection( xlsPref ));
Set Preferences(Excel selection(1));

//Concatenating the Group A files
dt1=New Table();
If(N Items(A)>=1, 
	::dtResult = dt1<<Concatenate(A, Output Table name("HFQST_Result"));
	dtResult<<Delete Columns("Column 1");
);
Close(dt1, No Save);
//Get column header from the final table
colheader = {};
colheader = dtResult<<get Column Names(string);

//Setting the correct column names for the errored files
For(j=1,j<=N Items(B), j++,
	If(Ncol(B[j])< N Items(colheader), temp =Ncol(B(j)), temp =N Items(colheader) );
	For (i=1,i<=temp,i++,
	Column(B[j],i)<<Set name(colheader[i]);
	 );
);

//Concatenating the Group B files
dt1=New Table();
If(N Items(B)>1, 
	dt3 = dt1<<Concatenate(B, Output Table name("Remaining Data"));
	dt3<<Delete Columns("Column 1");
);
Close(dt1, No Save);

//checking if the column numbers are the same among all the files Group A
flga = 0;
for(j=1, j<=N Items(A),j++, 
	If ((NCol(A[1]) != NCol(A[j])) & flga == 0,
	flga = 1;
	);
);

//Closing all the open files
for(j=1, j<=N Items(A),j++, 
Close(A[j], No Save);
);
for(j=1, j<=N Items(B),j++, 
Close(B[j], No Save);
);

dtResult<<Select Where(Is Missing(:Name("PartID")));
dtResult<<delete rows();

wait(1);
dtResult<<save("HFQST_Result.jmp");
Show("Load XLS files (Result) done!");


//_____________________________________________________________________________________________________________________________________________________________________
//Add test information
col=Column(dtResult,"PartID"); col<<Set Name("Part ID");
dtResult<<NewColumn("Test Name",Formula("HFQST"),EvalFormula);
dtResult<<NewColumn("Wafer",Formula(Substr(:Part ID, 1, 4)),EvalFormula);
dtResult<<NewColumn("SF_Lot_ID",Formula(Substr(:Lot ID, 5,4)),EvalFormula);
dtResult<<NewColumn("HFQST_Field",Formula("1.4T"),EvalFormula);
dtResult<<NewColumn("Test Condition",Character,Formula(Char(:HFQST_Field)),EvalFormula);
dtResult<<NewColumn("Spec_Revision",Character,Formula("Rev-1"),EvalFormula);
dtResult<<NewColumn("Test_Group",Formula(:Name("Lot ID") || "_" || :NBO_Tag),EvalFormula);
dtResult<<NewColumn("H50_kOe",Formula((:Name("FWD 50% Roll-off Field")+:Name("REV 50% Roll-off Field"))/2/1000),EvalFormula);
dtResult<<NewColumn("P1_Field_kOe",Formula(abs((:Name("FWD P1 Switching Field")+:Name("REV P1 Switching Field"))/2/1000)),EvalFormula);

Show("Add test information done!");

//_____________________________________________________________________________________________________________________________________________________________________
//Re-order columns

//Re-order column headers in BDV result file
dtResult<<Move Selected Columns({"DOE"},To First);
dtResult<<Move Selected Columns({"Test Name"}, After("DOE"));
dtResult<<Move Selected Columns({"Spec_Revision"}, After("Test Name"));
dtResult<<Move Selected Columns({"Part ID"}, After("Spec_Revision"));
dtResult<<Move Selected Columns({"Wafer"}, After("Part ID"));
dtResult<<Move Selected Columns({"Lot ID"}, After("Wafer"));
dtResult<<Move Selected Columns({"SF_Lot_ID"}, After("Lot ID"));
dtResult<<Move Selected Columns({"HFQST_Field"}, After("SF_Lot_ID"));
dtResult<<Move Selected Columns({"Test Condition"}, After("HFQST_Field"));
dtResult<<Move Selected Columns({"NBO_Tag"}, After("Test Condition"));
dtResult<<Move Selected Columns({"H50_kOe"}, After("NBO_Tag"));
dtResult<<Move Selected Columns({"P1_Field_kOe"}, After("H50_kOe"));

dtResult<<save("HFQST_Result.jmp");
Show("Sort columns done!"); 

//_____________________________________________________________________________________________________________________________________________________________________
//Summary by user requirement.
//Plot H50 and P1 Field by user requirement.
dtFilSummary=dtResult<< Summary(
	Group(
		:DOE, 
		:Test Name, 
		:Spec_Revision, 
		:Wafer, 
		:SF_Lot_ID, 
		:HFQST_Field, 
		:Test Condition, 
//		:Date, 
		:Name("Lot ID"), 
		:NBO_Tag
		),
	Median( :H50_kOe ),
	Median( :P1_Field_kOe ),
	Median( :Name( "FWD 50% Roll-off Field" ) ),
	Median( :FWD P1 Switching Field ),
	Median( :Name( "REV 50% Roll-off Field" ) ),
	Median( :REV P1 Switching Field ),
//	Median( :SH_MC ),
//	Median( :SH_MRR ),
//	Median( :SH_corr ),
	Std Dev( :H50_kOe ),
	Std Dev( :P1_Field_kOe ),
	Std Dev( :Name( "FWD 50% Roll-off Field" ) ),
	Std Dev( :FWD P1 Switching Field ),
	Std Dev( :Name( "REV 50% Roll-off Field" ) ),
	Std Dev( :REV P1 Switching Field ),
//	Std Dev( :SH_MC ),
//	Std Dev( :SH_MRR ),
//	Std Dev( :SH_corr ),
	Mean( :H50_kOe ),
	Mean( :P1_Field_kOe ),
	Mean( :Name( "FWD 50% Roll-off Field" ) ),
	Mean( :FWD P1 Switching Field ),
	Mean( :Name( "REV 50% Roll-off Field" ) ),
	Mean( :REV P1 Switching Field ),
//	Mean( :SH_MC ),
//	Mean( :SH_MRR ),
//	Mean( :SH_corr ),
	Output Table Name( "HFQST_Summary" )	
	);


dtFilSummary<<save("HFQST_Summary.jmp");
Show("HFQST summary done!"); 

//_____________________________________________________________________________________________________________________________________________________________________
//Create transposed data from "HFQST_Result".
dtFilTransposed = dtResult <<
Transpose(
	columns(
		:Name("H50_kOe"),
		:Name("P1_Field_kOe"),
		:Name("FWD 50% Roll-off Field"),
		:Name("FWD P1 Switching Field"),
		:Name("REV 50% Roll-off Field"),
		:Name("REV P1 Switching Field")
	),
	By(
		:DOE,
		:Test Name,
		:Spec_Revision,
		:Part ID,
		:Wafer,
//		:Date,
		:Lot ID,
		:SF_Lot_ID,
		:HFQST_Field,
		:Test Condition,
		:NBO_Tag,
//		:Setup File
	),
	Output Table( "HFQST_Transposed" )
);
	
col=Column(dtFilTransposed,"Row 1"); col<<Set Name("Data");
col=Column(dtFilTransposed,"Label"); col<<set Name("Parameter");
//dtFilSummary<<Save("\\wdtbsan02\doe\DataFiles\Reader\"|| DOE ||"_HFQST_Transposed"||".CSV");
dtFilTransposed<<save("HFQST_Transposed.jmp");
Show("Transposed data done!");

//_____________________________________________________________________________________________________________________________________________________________________
//Plot oneway analysis.
chartOneway=dtResult<<Oneway(
	Y( 
		:Name("H50_kOe"),
		:Name("P1_Field_kOe"),
		:Name("FWD 50% Roll-off Field"),
		:Name("FWD P1 Switching Field"),
		:Name("REV 50% Roll-off Field"),
		:Name("REV P1 Switching Field"),
		),
	X( :Test_Group ),
	All Pairs(
		1,
		Confidence Quantile( 0 ),
		LSD Threshold Matrix( 0 ),
		Ordered Differences Report( 0 ),
		Connecting Letters Report( 1 )
	),
	Quantiles( 1 ),
	Means and Std Dev( 1 ),
	Box Plots( 1 ),
	Mean Diamonds( 1 ),
	Mean Error Bars( 1 ),
	Std Dev Lines( 1 ),
	Comparison Circles( 1 ),
	Points Jittered( 1 ),
	X Axis Proportional( 0 ),
	Unequal Variances( 1 ),
	SendToReport(
//		Dispatch(
//			{},
//			FrameBox,
//			{DispatchSeg(
//				Box Plot Seg( 1 ),
//				{Box Style( "Outlier" ), Line Color( "Red" )}
//			), DispatchSeg(
//				Box Plot Seg( 2 ),
//				{Box Style( "Outlier" ), Line Color( "Red" )}
//			)}
//		),
		Dispatch( {"Quantiles"}, "25%", NumberColBox, {Name( "Hide/Unhide" )(1)} ),
		Dispatch( {"Quantiles"}, "75%", NumberColBox, {Name( "Hide/Unhide" )(1)} ),
		Dispatch(
			{"Means and Std Deviations"},
			"Std Err Mean",
			NumberColBox,
			{Name( "Hide/Unhide" )(1)}
		),
		Dispatch(
			{"Means and Std Deviations"},
			"Lower 95%",
			NumberColBox,
			{Name( "Hide/Unhide" )(1)}
		),
		Dispatch(
			{"Means and Std Deviations"},
			"Upper 95%",
			NumberColBox,
			{Name( "Hide/Unhide" )(1)}
		)
	)
);

Show("Oneway analysis data done!");
